package handler

import (
	"net/http"
    "log"

	"github.com/labstack/echo/v4"
    "{{.ModuleName}}/modules/{{.ModelName}}/model"
    "{{.ModuleName}}/modules/{{.ModelName}}/repo"
)

type Handler struct {
    repository repo.{{ Title .ModelName }}Repo
}

func NewHandler(repository repo.{{ Title .ModelName }}Repo) *Handler {
    return &Handler {
        repository,
    }
}

// Create {{Title .ModelName}}
// @Summary Create {{Title .ModelName}}
// @Description Create {{Title .ModelName}} by POST
// @ID create-{{ .ModelName }}
// @Accept  json
// @Produce  json
// @Param   {{.ModelName}}  body  model.{{Title .ModelName }} true  "{{Title .ModelName}}"
// @Success 201 {string} string	"Created"
// @Failure 500 {object} string "Some error occured"
// @Router /{{.ModelName}}s [post]
func (h *Handler) Create{{ Title .ModelName }}(c echo.Context) error {
    var m model.{{ Title .ModelName }}
    if err := c.Bind(&m); err != nil {
        log.Println(err)
		return err
	}

    // ADD BUSINESS LOGIC HERE IF REQUIRED

    id, err := h.repository.Insert(m)
    if err != nil {
        log.Println(err)
        return err
    }
    m.ID = id
    return c.JSON(http.StatusCreated, m)
}

// Get {{Title .ModelName}}
// @Summary Get {{Title .ModelName}}
// @Description Get {{Title .ModelName}} by GET
// @ID get-{{ .ModelName }}
// @Accept  json
// @Produce  json
// @Param   id  path  string true  "{{Title .ModelName}} ID"
// @Success 201 {string} string	"Ok"
// @Failure 400 {object} string "Bad Request, param empty"
// @Failure 500 {object} string "Some error occured"
// @Router /{{.ModelName}}s/{id} [get]
func (h *Handler) Get{{ Title .ModelName }}(c echo.Context) error {
    id := c.Param("id")
    if id == "" {
        log.Println("ID param is empty")
        return c.NoContent(http.StatusBadRequest)
    }

    m, err := h.repository.Get(id)
    if err != nil {
        log.Println(err)
        return err
    }
    if m == nil {
        return c.NoContent(http.StatusNotFound)
    }
    m.ID = id
    return c.JSON(http.StatusOK, m)
}

// Update {{Title .ModelName}}
// @Summary Update {{Title .ModelName}}
// @Description Update {{Title .ModelName}} by PUT
// @ID update-{{ .ModelName }}
// @Accept  json
// @Produce  json
// @Param   {{.ModelName}}  body  model.{{Title .ModelName }} true  "{{Title .ModelName}}"
// @Success 200 {string} string	"Ok"
// @Failure 500 {object} string "Some error occured"
// @Router /{{.ModelName}}s [put]
func (h *Handler) Update{{ Title .ModelName }}(c echo.Context) error {
    var m model.{{ Title .ModelName }}
    if err := c.Bind(&m); err != nil {
		return err
	}

    // ADD BUSINESS LOGIC HERE IF REQUIRED

    err := h.repository.Update(m)
    if err != nil {
        log.Println(err)
        return err
    }

    updatedModel, err := h.repository.Get(m.ID)
    if err != nil {
        log.Println(err)
        return err
    }

    return c.JSON(http.StatusOK, updatedModel)
}

// Delete {{Title .ModelName}}
// @Summary Delete {{Title .ModelName}}
// @Description Delete {{Title .ModelName}} by DELETE
// @ID delete-{{ .ModelName }}
// @Accept  json
// @Produce  json
// @Param   id  path  string true  "{{Title .ModelName}} ID"
// @Success 201 {string} string	"Ok"
// @Failure 400 {object} string "Bad Request, param empty"
// @Failure 500 {object} string "Some error occured"
// @Router /{{.ModelName}}s/{id} [delete]
func (h *Handler) Delete{{ Title .ModelName }}(c echo.Context) error {
    id := c.Param("id")
    if id == "" {
        log.Println("ID param is empty")
        return c.NoContent(http.StatusBadRequest)
    }

    err := h.repository.Delete(id)
    if err != nil {
        log.Println(err)
        return err
    }

    return c.NoContent(http.StatusOK)
}

// func getAll{{ Title .ModelName }}(c echo.Context) error {
//    
// }
