package repo

// This code is generated
// DO NOT EDIT UNLESS YOU KNOW WHAT YOU ARE DOING

import (
   "context"
   "log"
   
   "go.mongodb.org/mongo-driver/bson"
   "go.mongodb.org/mongo-driver/bson/primitive"
   "go.mongodb.org/mongo-driver/mongo"
   "go.mongodb.org/mongo-driver/mongo/options"
   "{{.ModuleName}}/modules/{{TitleLower .ModelName}}/model"
)

type MongoRepo struct {
    Client *mongo.Client
    Collection string
    Database string
}

func NewMongoRepo(uri, database, collection string) ({{Title .ModelName}}Repo, error){
    client, err := mongo.NewClient(options.Client().ApplyURI(uri))
    if err != nil {
        return nil, err
    }

    err = client.Connect(context.Background())
    if err != nil {
        return nil, err
    }

    return &MongoRepo{
        client,
        collection,
        database,
    }, nil
}

func (c *MongoRepo) Insert(m model.{{ Title .ModelName }}) (string, error) {
    collection := c.Client.Database(c.Database).Collection(c.Collection)
    res, err := collection.InsertOne(context.TODO(), m)
    if err != nil {
        log.Println(err)
        return "", err
    }
    log.Println(res)
    return res.InsertedID.(primitive.ObjectID).Hex(), nil
}

func (c *MongoRepo) Get(id string) (model.{{ Title .ModelName }}, error) {
    collection := c.Client.Database(c.Database).Collection(c.Collection)
    var m model.{{ Title .ModelName }}
    
    objectId, err := primitive.ObjectIDFromHex(id)
    if err != nil {
        log.Println(err)
        return model.{{ Title .ModelName }}{}, err
    }
    collection.FindOne(context.TODO(), bson.M{"_id": objectId}).Decode(&m)
    return m, nil
}

func (c *MongoRepo) Update(m model.{{ Title .ModelName }}) error {
    collection := c.Client.Database(c.Database).Collection(c.Collection)
    update := bson.M{
        "$set": m,
    }
    objectId, err := primitive.ObjectIDFromHex(m.ID)
    if err != nil {
        log.Println(err)
        return err
    }
    filter := bson.M{"_id": objectId}
    _, err = collection.UpdateOne(context.TODO(), filter, update)
    return err
}

func (c *MongoRepo) Delete(id string) error {
    collection := c.Client.Database(c.Database).Collection(c.Collection)
    objectId, err := primitive.ObjectIDFromHex(id)
    if err != nil {
        log.Println(err)
        return err
    }
    res, err := collection.DeleteOne(context.TODO(), bson.M{"_id": objectId})
    if err != nil {
        log.Println(err)
        return err
    }
    log.Println(res)
    return nil
}
